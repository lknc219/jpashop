API 테스트를 위해 사용할 postman 을 설치해준다.

====================================================================================================================================

회원 등록 API 

controller와는 별개로 패키지를 하나 만들어준다.

일반 controller 는 @Controller 애너테이션을 쓰지만
api에서는 @RestController 애너테이션을 사용한다. 들어가보면 ResponseBody, Controller 애너테이션 모두 사용하고 있음을 알 수 있다.

등록이기 때문에
@PostMapping("/api/v1/members")
public CreateResponse saveMemberV2(@RequestBody @Valid CreateMemberRequest request) {
		Member member = new Member();
		member.setName(request.name);
		Long id = memberService.join(member);
		return new CreateMemberResponse(id);
}

@Data //Getter Setter toString RequiredConstructor 등 기능 모여있음
static class CreateMemberRequest {
		@NotEmpty
		private String name;
}

@RequestBody - 클라이언트가 전송하는 Json 형태의 HTTP Body 내용을 Java Object로 변환시켜주는 역할
								Body가 존재하지 않는 Get 메소드에는 에러가 발생한다.

@Valid - service 단이 아닌 객체 안에서, 들어오는 값에 대해 검증을 할 수 있다. 여러가지 애너테이션을 지원한다 @NotEmpty @NotNull @Email 등 필요하다면 찾아서 활용하자

api 메서드의 파라미터로 엔티티자체를 사용하지 말고 DTO를 만들어서 필요한 데이터만 가지고 활용하는 것이 좋다.
엔티티 자차에 Valid 를 걸게 되면 해당 엔티티를 사용하는 다른 코드에도 영향을 줄 수 있기 때문이고, 유지보수시 반드시 문제가 생긴다.


====================================================================================================================================

회원 수정 API

Post가 아닌 Put 방식으로 데이터를 전송 할 것이다.

이름수정 API

@PutMapping("/api/v2/members/{id}")
public UpateMemberResponse updateMemberV2(
			@PathVariable("id") Long id,
			@RequestBody @Valid UpdateMemberRequest request) {
		memberService.update(id, request.getName());
		Member findMember = memberService.findOne(id);
		return new UpdateMemberResponse(findMember.getId(),findMember.getName());
}

@Data
UpdateRequest 로는 name 만 담는 클래스를 만들어주고

@Data @AllArgsConstructor
UpdateResponse 는 반환될 id와 name 을 담는 클래스로 만들어준다.

update 메소드에서 return 받아 Response에 뿌려줄 수도 있지만 기능을 분리함으로써 얻는 유지보수 이점이 더 많다고 판단된다.
update는 update 만 해주고 업데이트 한 데이터를 findOne해서 가져온걸 Response를 생성하는데 사용하고 뿌려준다.

====================================================================================================================================

회원조회 API

데이터 변경사항이 없을 예정이므로 application.yml설정 파일의 ddl-auto를 none으로 바꿔둔다.

@GetMapping("/api/v1/members")
public List<Member> membersV1() {
		return memberService.findMembers(); 
}

이렇게 엔티티를 바로 가져다 써서 노출시키면 안된다.

v2버전으로

    @GetMapping("/api/v2/members")
    public Result memberV2() {
        List<Member> findMembers = memberService.findMembers();
        List<MemberDto> collect = findMembers.stream()
                .map(m -> new MemberDto(m.getName()))
                .collect(Collectors.toList());

        return new Result(collect.size(), collect);
    }

    @Data
    @AllArgsConstructor
    static class Result<T> {
        private int count;
        private T data;
    }

    @Data
    @AllArgsConstructor
    static class MemberDto {
        private String name;
    }

    
Result 를 감싸서 하나의 배열로 return 되는것을 방지해 유연한 api가 될 수 있게 해준다.
count를 추가해주기 를 해보았다.
    