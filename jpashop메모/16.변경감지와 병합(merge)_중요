변경감지와 병합(merge)

준영속 엔티티
 -영속성 컨텍스트가 더는 관리하지 않는 엔티티를 말한다.
 -여기서는 itemService.saveItem(book) 에서 수정을 시도하는 Book 객체다. Book객체는 이미 DB에 한번 저장되어서 식별자가 존재한다. 
  이렇게 임의로 만들어낸 엔티티도 기존 식별자를 가지고 있으면 준영속 엔티티로 볼 수 있다.

준영속 엔티티를 수정하는 2가지 방법
 -변경 감지 기능 사용
 -병합(merge) 사용
 
변경 감지 기능 사용
 -영속성 컨텍스트에서 엔티티를 다시 조회한 후에 데이터를 수정하는 방법
 -트랜잭션 안에서 엔티티를 다시 조회, 변경할 값 선택 -> 트랜잭션 커밋 시점에 변경 감지(Dirty Checking)이 동작해서 데이터베이스에서 UPDATE SQL 실행
 
병합 사용
 -병합은 준영속 상태의 엔티티를 영속 상태로 변경할 때 사용하는 기능이다.
 -병합 동작 방식
  1) merge()를 실행한다
  2) 파라미터로 넘어온 준영속 엔티티의 식별자 값으로 1차 캐시에서 엔티티를 조회한다.
  3) 조회한 영속 엔티티(mergeMember)에 member 엔티티의 값을 채워 넣는다.(member 엔티티의 모든 값을 mergeMember에 밀어 넣는다. 이때 mergeMember의 "회원1"이라는 이름이 "회원명변경"으로 바뀐다)
  4) 영속 상태인 mergeMember를 반환하다.

병합 동작 방식
 1) 준영속 엔티티의 식별자 값으로 영속 엔티티를 조회한다.
 2) 영속 엔티티의 값을 준영속 엔티티의 값으로 모두 교체한다.(병합한다.)
 3) 트랜잭션 커밋 시점에 변경 감지 기능이 동작해서 데이터베이스에 UPDATE SQL이 실행된다.
 
*** 주의) 변경 감지 기능을 사용하면 원한느 속성만 선택해서 변경할 수 있지만, 병합을 사용하면 모든 속성이 변경된다.
		     병합시 값이 없으면 null로 업데이트 할 위험도 있다.(병합은 모든 필드를 교체한다.)
		     
		     그러므로 병합(merge)보다 변경 감지를 사용하는 것이 안전하다.
		     변경감지를 사용할 때는 적절한 이름을 사용하여 메소드를 만들어 사용하는 것이 코드 추적 등 유지보수에 좋다.

ItemController에서 받은 Form 데이터를 인자로 Service의 Update를 호출한다
Service의 Update 메소드에서는 Repository 클래스를 통해  findOne 을 한 후 영속성 컨텍스트에 등록해주면서
등록된 엔티티를 변경하기만 해도 update 가 자동으로 되는 dirty checking(변경감지) 방식으로 하는 것이 좋다.