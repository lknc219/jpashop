주문 도메인 개발


구현기능
	상품 주문
	주문 내역 조회
	주문 취소
	
순서
	주문 엔티티, 주문상품 엔티티 개발
	주문 리포지토리 개발
	주문 서비스 개발
	주문 검색 기능 개발
	주문 기능 테스트

도메인 위주 개발 코드를 이해할 수 있다.
==============================================================================================================

주문, 주문상품 엔티티 개발

연관관계가 복잡한 엔티티는 별도의 생성 메서드가 있는 것이 좋다.
이렇게 생성메서드가 있으면 생성시점을 바꾸거나 할 때 이 메서드의 위치만 변경해주면 된다.
    public static Order createOrder (Member member, Delivery delivery, OrderItem... orderItems){
        Order order = new Order();
        order.setMember(member);
        order.setDelivery(delivery);
        for (OrderItem orderItem : orderItems) {
            order.addOrderItem(orderItem);
        }
        order.setStatus(OrderStatus.ORDER);
        order.setOrderDate(LocalDateTime.now());

        return order;
    }

주문취소  메서드
    public void cancel(){
        if(delivery.getDeliveryStatus() == DeliveryStatus.COMP){
            throw new IllegalStateException("이미 배송완료한 상품은 취소가 불가능합니다.");
        }
        
        this.setStatus(OrderStatus.CANCEL);
        for (OrderItem orderItem : orderItems) {
            orderItem.cancel();
        }
    }

==============================================================================================================

주문 리포지토리 개발

    /**
     * 주문
     */
    @Transactional
    public Long order(Long memberId, Long itemId, int count){

        //엔티티 조회
        Member member = memberRepository.findOnd(memberId);
        Item item = itemRepository.findOne(itemId);

        //배송정보 설정
        Delivery delivery = new Delivery();
        delivery.setAddress(member.getAddress());

        //주문상품 생성
        OrderItem orderItem = OrderItem.createOrderItem(item, item.getPrice(), count);

        //주문 생성
        Order order = Order.createOrder(member, delivery, orderItem);

        //주문 저장
        orderRepository.save(order);

        return order.getId();
    }
    
하나만 save 해줘도 되는 이유는 Order 엔티티 속 Delivery나 OrderItems가  cascade = CascadeType.ALL 로 설정되어있기 때문에 자동으로 persist 된다.
Cascade를 써야하는 경우 해당 엔티티를 참조하는 부모엔티티가 하나일 경우 써도 된다.
하지만 참조를 여러군데에서 하는 경우는 하나씩 persist 하는 것이 좋다.

    /**
     * 주문 취소
     */
    @Transactional
    public void cancelOrder(Long id) {
        //주문 엔티티 조회
        Order order = orderRepository.findOne(id);
        //주문 취소
        order.cancel();
    }

이전에 사용하던 mybatis는 주문 취소 후 주문취소에 따른 업데이트쿼리를 또 날려줘야 하지만 JPA에서는 데이터 변경이 일어나면 자동으로 update 쿼리를 날려주기 때문에
편리하게 이용할 수 있다.

주문 서비스의 주문과 주문 취소 메서드를 보면 비즈니스 로직 대부분이 엔티티에 있다.
서비스 계층은 단순히 엔티티에 필요한 요청을 위임하는 역할을 한다.
이처럼 엔티티가 비즈니스 로직을 가지고 객체 지향의 특성을 적극 활용하는 것을 도메인 모델 패턴이라고 한다.
반대로 엔티티에는 비즈니스 로직이 거의 없고 서비스 계층에서 대부분의 비즈니스 로직을 처리하는 것을 트랜잭션 스크립트 패턴이라고 한다.
