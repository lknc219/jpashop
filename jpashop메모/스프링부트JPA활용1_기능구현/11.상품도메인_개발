상품 도메인 개발


구현기능
	상품 등록
	상품 목록 조회
	상품 수정

순서
	상품 엔티티 개발(비즈니스 로직 추가)
	상품 리포지토리 개발
	성품 서비스 개발 (회원이랑 비슷해서 상품 기능 테스트 생략)
	
==============================================================================================================

상품 엔티티 개발


Item 엔티티 클래스
    /**
     * stock 증가
     * @param quantity
     */
    public void addStock(int quantity) {
        this.stockQuantity = quantity;
    }

    /**
     * stock 감소
     * @param quantity
     */
    public void removeStock(int quantity) {
        int restStock = this.stockQuantity = quantity;
        if(restStock < 0) {
            throw new NotEnoughStockException("need more stock");
        }
        this.stockQuantity = restStock;
    }
    
Exception 메서드를 만들어서 사용할 때 RuntimeException을 상속받아 사용하고 스택 트레이스 라던지 메세지를 찍는다던지 하는 기능을 사용하기 위해
기본 메서드들을 Override 해서 사용해야한다.

*) 이렇게 Setter를 이용하지 않고 변경이 필요하면 메서드를 만들어서 사용하는 것이 좋다.
	 엔티티 자체에서 해결할 수 있는 것들은 엔티티 안에 비즈니스 로직을 넣는 것이 좋다.

==============================================================================================================

상품 리포지토리 개발

ItemRepository 클래스 생성

재고 수량 증가 감소 메서드 구현

   public void save(Item item) {
       if (item.getId() == null){
           em.persist(item);
       } else {
          em.merge(item);
       }
   }

   public Item findItem (int id){
       return em.find(Item.class, id);
   }

   public List<Item> findALl () {
       return em.createQuery("select i from Item i",Item.class)
               .getResultList();
   }

==============================================================================================================

상품 서비스 개발


ItemService 클래스 생성

@Service
@RequiredArgsConstructor
@Transactional(readOnly = true)
public class ItemService {

    private final ItemRepository itemRepository;

    @Transactional
    public void saveItem(Item item) {
        itemRepository.save(item);
    }

    public List<Item> findItems() {
        return itemRepository.findAll();
    }

    public Item itemOne(Long itemId) {
        return itemRepository.findOne(itemId);
    }

}

