엔티티 설계의 주의점

가급적 Setter를 사용하지 말자(예제에서는 다 열어두었음.)

모든 연관관계는 지연로딩으로 설정 @ManyToOne(fetch = FetchType.LAZY) 
	@*ToOne 은 기본이 EAGER이기 때문에 모두 설정해줘야한다
	JPQL 사용시 SQL로 번역된 쿼리를 날리면서 N+1 문제를 발생시킬 수 있다.
	select o from order o -> select * from order 
	위의 쿼리를 실행했을때 order에 있는 member에 대한 조회 쿼리도 모두 실행하면서 N+1 개의 쿼리를 날리게 된다.

컬렉션은 필드에서 초기화 하자. new ArrayList<>();
	null문제에서 안전해지고
	하이버네이트는 엔티티를 영속화 할 때, 컬렉션을 감싸서 하이버네이트가 제공하는 내장컬렉션으로 변경한다.
	getClass() 하면 영속화 했을때랑 아닐때 다른 출력 결과가 나오는 것을 확인할 수 있다.
	
테이블, 컬럼명 생성 전략
	(name = "아무거나") 이런식으로 변경 가능하지만
	스프링부트 신규 설정 (엔티티(필드) -> 테이블(컬럼))
		1. 카멜케이스 -> 언더스코어 (memberPoint -> member_point)
		2. .(점 -> _(언더스코어)
		3. 대문자 -> 소문자
	설정을 변경할 수 있다 필요하다면 찾아서 전략설정을 바꾸자

cascade 옵션
@OneToMany(mappedBy = "order", cascade = CascadeType.ALL)
private List<OrderItem> orderItems = new ArrayList<>();
	원래는 연관관계로 묶여있는 요소들을 하나씩 persist 해주고 요소가 포함되어있는 객체를 또 persist 해줘야 하지만
	CascadeType을 ALL로 해주면 persist 없이 add 만 해주고 요소가 포함된 객체만 persist해주면 연관관계에로 설정되어있는
	컬럼까지 모두 persist 된다.

연관관계 편의 메소드
	연관관계 편의 메서드는 로직상 주가 되는 엔티티에 구현하는 것이 좋다.
	양방향의 엔티티의 값을 세팅해줄때 연관되어있는 객체에도 함께 값을 셋팅하는 메소드
    //==연관관계 편의메서드 ==//
    public void setMember(Member member) {
        this.member = member;
        member.getOrders().add(this);
    }

    public void setOrderItem(OrderItem orderItem) {
        this.orderItems.add(orderItem);
        orderItem.setOrder(this);
    }

    public void setDelivery(Delivery delivery) {
        this.delivery = delivery;
        delivery.setOrder(this);
    }